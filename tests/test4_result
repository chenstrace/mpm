Test4: Test single matching set.

DFA representation of /a.b+c/
  Flags: fixed
      0: [a] (term:0)
      9: [.] (term:1)
     18: [b] (term:2)
     27: [+] (term:3)
     36: [c] (term:4)
     45: END (id:0)

  START : 0
      0 : [a] 1
      1 : [.] 2
      2 : [b] 3
      3 : [+] 4
      4!: [c]

Half (0..127) char range is used.

Processing    0: Active terms: <0>, Final states: <>
  For [\x00-`b-\xff] next state: 0
  For [a] next state: 1
Processing    1: Active terms: <0,1>, Final states: <>
  For [\x00-\x2d/-`b-\xff] next state: 0
  For [.] next state: 2
  For [a] next state: 1
Processing    2: Active terms: <0,2>, Final states: <>
  For [\x00-`c-\xff] next state: 0
  For [a] next state: 1
  For [b] next state: 3
Processing    3: Active terms: <0,3>, Final states: <>
  For [\x00-*,-`b-\xff] next state: 0
  For [+] next state: 4
  For [a] next state: 1
Processing    4: Active terms: <0,4>, Final states: <>
  For [\x00-`bd-\xff] next state: 0
  For [a] next state: 1
  For [c] next state: 5
Processing    5: Active terms: <0>, Final states: <0>
  For [\x00-`b-\xff] next state: 0
  For [a] next state: 1

Hashmap statistics: states: 6, buckets: 1024, max bucket length: 1
Statistics: patterns: 1, terms: 5, Compression save: 86.08% (856 bytes instead of 6148 bytes)
String: 'aabc' from 0 does not match
String: 'a.b+c' from 0 matches (0x1)
String: 'a.b+' from 0 does not match
String: 'a.b+cd' from 0 matches (0x1)
String: 'mXa.b+c' from 0 matches (0x1)
String: 'na.b+' from 0 does not match

DFA representation of /[Ab]X+/i
  Flags: fixed
      0: [[] (term:0)
      9: [Aa] (term:1)
     18: [Bb] (term:2)
     27: []] (term:3)
     36: [Xx] (term:4)
     45: [+] (term:5)
     54: END (id:0)

  START : 0
      0 : [[] 1
      1 : [Aa] 2
      2 : [Bb] 3
      3 : []] 4
      4 : [Xx] 5
      5!: [+]

Half (0..127) char range is used.

Processing    0: Active terms: <0>, Final states: <>
  For [\x00-Z\-\xff] next state: 0
  For [[] next state: 1
Processing    1: Active terms: <0,1>, Final states: <>
  For [\x00-@B-Z\-`b-\xff] next state: 0
  For [Aa] next state: 2
  For [[] next state: 1
Processing    2: Active terms: <0,2>, Final states: <>
  For [\x00-AC-Z\-ac-\xff] next state: 0
  For [Bb] next state: 3
  For [[] next state: 1
Processing    3: Active terms: <0,3>, Final states: <>
  For [\x00-Z\^-\xff] next state: 0
  For [[] next state: 1
  For []] next state: 4
Processing    4: Active terms: <0,4>, Final states: <>
  For [\x00-WYZ\-wy-\xff] next state: 0
  For [Xx] next state: 5
  For [[] next state: 1
Processing    5: Active terms: <0,5>, Final states: <>
  For [\x00-*,-Z\-\xff] next state: 0
  For [+] next state: 6
  For [[] next state: 1
Processing    6: Active terms: <0>, Final states: <0>
  For [\x00-Z\-\xff] next state: 0
  For [[] next state: 1

Hashmap statistics: states: 7, buckets: 1024, max bucket length: 1
Statistics: patterns: 1, terms: 6, Compression save: 86.06% (1000 bytes instead of 7172 bytes)
String: 'AXX' from 0 does not match
String: '[aB]x+' from 0 matches (0x1)
String: '[Ab]X' from 0 does not match
String: '::[AB]X+' from 0 matches (0x1)
String: '::[ab]x+R' from 0 matches (0x1)

DFA representation of /a?b*(cc+|de?f)/i
  Flags: none
      0: BRANCH TO 10 (+10)
      1: [Aa] (term:0)
     10: BRANCH TO 21 (+11)
     11: [Bb] (term:1)
     20: BRANCH TO 11 (-9)
     21: BRANCH TO 42 (+21)
     22: [Cc] (term:2)
     31: [Cc] (term:3)
     40: BRANCH TO 31 (-9)
     41: JUMP TO 70 (+29)
     42: [Dd] (term:4)
     51: BRANCH TO 61 (+10)
     52: [Ee] (term:5)
     61: [Ff] (term:6)
     70: END (id:0)

  START : 0 1 2 4
      0 : [Aa] 1 2 4
      1 : [Bb] 1 2 4
      2 : [Cc] 3
      3!: [Cc] 3
      4 : [Dd] 5 6
      5 : [Ee] 6
      6!: [Ff]

Half (0..127) char range is used.

Processing    0: Active terms: <0-2,4>, Final states: <>
  For [\x00-@E-`e-\xff] next state: 0
  For [Aa] next state: 0
  For [Bb] next state: 0
  For [Cc] next state: 1
  For [Dd] next state: 2
Processing    2: Active terms: <0-2,4-6>, Final states: <>
  For [\x00-@G-`g-\xff] next state: 0
  For [Aa] next state: 0
  For [Bb] next state: 0
  For [Cc] next state: 1
  For [Dd] next state: 2
  For [Ee] next state: 3
  For [Ff] next state: 4
Processing    4: Active terms: <0-2,4>, Final states: <0>
  For [\x00-@E-`e-\xff] next state: 0
  For [Aa] next state: 0
  For [Bb] next state: 0
  For [Cc] next state: 1
  For [Dd] next state: 2
Processing    3: Active terms: <0-2,4,6>, Final states: <>
  For [\x00-@EG-`eg-\xff] next state: 0
  For [Aa] next state: 0
  For [Bb] next state: 0
  For [Cc] next state: 1
  For [Dd] next state: 2
  For [Ff] next state: 4
Processing    1: Active terms: <0-4>, Final states: <>
  For [\x00-@E-`e-\xff] next state: 0
  For [Aa] next state: 0
  For [Bb] next state: 0
  For [Cc] next state: 5
  For [Dd] next state: 2
Processing    5: Active terms: <0-4>, Final states: <0>
  For [\x00-@E-`e-\xff] next state: 0
  For [Aa] next state: 0
  For [Bb] next state: 0
  For [Cc] next state: 5
  For [Dd] next state: 2

Hashmap statistics: states: 6, buckets: 1024, max bucket length: 1
Statistics: patterns: 1, terms: 7, Compression save: 85.75% (876 bytes instead of 6148 bytes)
String: 'm' from 0 does not match
String: 'abbc' from 0 does not match
String: 'MaBbcCc' from 0 matches (0x1)
String: 'DeF' from 0 matches (0x1)
String: 'MaBDfA' from 0 matches (0x1)
String: 'de' from 0 does not match

DFA representation of /(m[xy]+m?n){2}/
  Flags: none
      0: [m] (term:0)
      9: [xy] (term:1)
     18: BRANCH TO 9 (-9)
     19: BRANCH TO 29 (+10)
     20: [m] (term:2)
     29: [n] (term:3)
     38: [m] (term:4)
     47: [xy] (term:5)
     56: BRANCH TO 47 (-9)
     57: BRANCH TO 67 (+10)
     58: [m] (term:6)
     67: [n] (term:7)
     76: END (id:0)

  START : 0
      0 : [m] 1
      1 : [xy] 1 2 3
      2 : [m] 3
      3 : [n] 4
      4 : [m] 5
      5 : [xy] 5 6 7
      6 : [m] 7
      7!: [n]

Half (0..127) char range is used.

Processing    0: Active terms: <0>, Final states: <>
  For [\x00-ln-\xff] next state: 0
  For [m] next state: 1
Processing    1: Active terms: <0,1>, Final states: <>
  For [\x00-ln-wz-\xff] next state: 0
  For [m] next state: 1
  For [xy] next state: 2
Processing    2: Active terms: <0-3>, Final states: <>
  For [\x00-lo-wz-\xff] next state: 0
  For [m] next state: 3
  For [n] next state: 4
  For [xy] next state: 2
Processing    4: Active terms: <0,4>, Final states: <>
  For [\x00-ln-\xff] next state: 0
  For [m] next state: 5
Processing    5: Active terms: <0,1,5>, Final states: <>
  For [\x00-ln-wz-\xff] next state: 0
  For [m] next state: 1
  For [xy] next state: 6
Processing    6: Active terms: <0-3,5-7>, Final states: <>
  For [\x00-lo-wz-\xff] next state: 0
  For [m] next state: 7
  For [n] next state: 8
  For [xy] next state: 6
Processing    8: Active terms: <0,4>, Final states: <0>
  For [\x00-ln-\xff] next state: 0
  For [m] next state: 5
Processing    7: Active terms: <0,1,3,7>, Final states: <>
  For [\x00-lo-wz-\xff] next state: 0
  For [m] next state: 1
  For [n] next state: 8
  For [xy] next state: 2
Processing    3: Active terms: <0,1,3>, Final states: <>
  For [\x00-lo-wz-\xff] next state: 0
  For [m] next state: 1
  For [n] next state: 4
  For [xy] next state: 2

Hashmap statistics: states: 9, buckets: 1024, max bucket length: 1
Statistics: patterns: 1, terms: 8, Compression save: 85.90% (1300 bytes instead of 9220 bytes)
String: 'mxnmy' from 0 does not match
String: 'mxxmnmyn' from 0 matches (0x1)
String: ':%mxyxmnmyxxn%:' from 0 matches (0x1)
String: 'mnmn' from 0 does not match
String: '<<<myynmxxmn>>' from 0 matches (0x1)

DFA representation of /\x7f{2}/
  Flags: none
      0: [\x7f] (term:0)
      9: [\x7f] (term:1)
     18: END (id:0)

  START : 0
      0 : [\x7f] 1
      1!: [\x7f]

Full (0..255) char range is used.

Processing    0: Active terms: <0>, Final states: <>
  For [\x00-~\x80-\xff] next state: 0
  For [\x7f] next state: 1
Processing    1: Active terms: <0,1>, Final states: <>
  For [\x00-~\x80-\xff] next state: 0
  For [\x7f] next state: 2
Processing    2: Active terms: <0,1>, Final states: <0>
  For [\x00-~\x80-\xff] next state: 0
  For [\x7f] next state: 2

Hashmap statistics: states: 3, buckets: 1024, max bucket length: 1
Statistics: patterns: 1, terms: 2, Compression save: 73.86% (804 bytes instead of 3076 bytes)
String: '€' from 0 matches (0x1)
String: '€€' from 0 does not match
String: '€' from 0 does not match

DFA representation of /\x80{2}/
  Flags: none
      0: [\x80] (term:0)
      9: [\x80] (term:1)
     18: END (id:0)

  START : 0
      0 : [\x80] 1
      1!: [\x80]

Full (0..255) char range is used.

Processing    0: Active terms: <0>, Final states: <>
  For [\x00-\x7f\x81-\xff] next state: 0
  For [\x80] next state: 1
Processing    1: Active terms: <0,1>, Final states: <>
  For [\x00-\x7f\x81-\xff] next state: 0
  For [\x80] next state: 2
Processing    2: Active terms: <0,1>, Final states: <0>
  For [\x00-\x7f\x81-\xff] next state: 0
  For [\x80] next state: 2

Hashmap statistics: states: 3, buckets: 1024, max bucket length: 1
Statistics: patterns: 1, terms: 2, Compression save: 73.86% (804 bytes instead of 3076 bytes)
String: '€' from 0 does not match
String: '€€' from 0 matches (0x1)
String: '€' from 0 does not match

DFA representation of /[a-\x90]{3}/
  Flags: none
      0: [a-\x90] (term:0)
      9: [a-\x90] (term:1)
     18: [a-\x90] (term:2)
     27: END (id:0)

  START : 0
      0 : [a-\x90] 1
      1 : [a-\x90] 2
      2!: [a-\x90]

Full (0..255) char range is used.

Processing    0: Active terms: <0>, Final states: <>
  For [\x00-`\x91-\xff] next state: 0
  For [a-\x90] next state: 1
Processing    1: Active terms: <0,1>, Final states: <>
  For [\x00-`\x91-\xff] next state: 0
  For [a-\x90] next state: 2
Processing    2: Active terms: <0-2>, Final states: <>
  For [\x00-`\x91-\xff] next state: 0
  For [a-\x90] next state: 3
Processing    3: Active terms: <0-2>, Final states: <0>
  For [\x00-`\x91-\xff] next state: 0
  For [a-\x90] next state: 3

Hashmap statistics: states: 4, buckets: 1024, max bucket length: 1
Statistics: patterns: 1, terms: 3, Compression save: 73.85% (1072 bytes instead of 4100 bytes)
String: '€' from 0 matches (0x1)
String: '€€' from 0 matches (0x1)
String: '€' from 0 does not match

